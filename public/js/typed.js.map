{"version":3,"sources":["typed.js"],"names":[],"mappingsfile":"typed.js","sourcesContent":["// The MIT License (MIT)\n\n// Typed.js | Copyright (c) 2014 Matt Boldt | www.mattboldt.com\n\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n\n\n\n! function($) {\n\n\t\"use strict\";\n\n\tvar Typed = function(el, options) {\n\n\t\t// chosen element to manipulate text\n\t\tthis.el = $(el);\n\n\t\t// options\n\t\tthis.options = $.extend({}, $.fn.typed.defaults, options);\n\n\t\t// attribute to type into\n\t\tthis.isInput = this.el.is('input');\n\t\tthis.attr = this.options.attr;\n\n\t\t// show cursor\n\t\tthis.showCursor = this.isInput ? false : this.options.showCursor;\n\n\t\t// text content of element\n\t\tthis.elContent = this.attr ? this.el.attr(this.attr) : this.el.text();\n\n\t\t// html or plain text\n\t\tthis.contentType = this.options.contentType;\n\n\t\t// typing speed\n\t\tthis.typeSpeed = this.options.typeSpeed;\n\n\t\t// add a delay before typing starts\n\t\tthis.startDelay = this.options.startDelay;\n\n\t\t// backspacing speed\n\t\tthis.backSpeed = this.options.backSpeed;\n\n\t\t// amount of time to wait before backspacing\n\t\tthis.backDelay = this.options.backDelay;\n\n\t\t// div containing strings\n\t\tthis.stringsElement = this.options.stringsElement;\n\n\t\t// input strings of text\n\t\tthis.strings = this.options.strings;\n\n\t\t// character number position of current string\n\t\tthis.strPos = 0;\n\n\t\t// current array position\n\t\tthis.arrayPos = 0;\n\n\t\t// number to stop backspacing on.\n\t\t// default 0, can change depending on how many chars\n\t\t// you want to remove at the time\n\t\tthis.stopNum = 0;\n\n\t\t// Looping logic\n\t\tthis.loop = this.options.loop;\n\t\tthis.loopCount = this.options.loopCount;\n\t\tthis.curLoop = 0;\n\n\t\t// for stopping\n\t\tthis.stop = false;\n\n\t\t// custom cursor\n\t\tthis.cursorChar = this.options.cursorChar;\n\n\t\t// shuffle the strings\n\t\tthis.shuffle = this.options.shuffle;\n\t\t// the order of strings\n\t\tthis.sequence = [];\n\n\t\t// All systems go!\n\t\tthis.build();\n\t};\n\n\tTyped.prototype = {\n\n\t\tconstructor: Typed,\n\n\t\tinit: function() {\n\t\t\t// begin the loop w/ first current string (global self.strings)\n\t\t\t// current string will be passed as an argument each time after this\n\t\t\tvar self = this;\n\t\t\tself.timeout = setTimeout(function() {\n\t\t\t\tfor (var i=0;i<self.strings.length;++i) self.sequence[i]=i;\n\n\t\t\t\t// shuffle the array if true\n\t\t\t\tif(self.shuffle) self.sequence = self.shuffleArray(self.sequence);\n\n\t\t\t\t// Start typing\n\t\t\t\tself.typewrite(self.strings[self.sequence[self.arrayPos]], self.strPos);\n\t\t\t}, self.startDelay);\n\t\t},\n\n\t\tbuild: function() {\n\t\t\tvar self = this;\n\t\t\t// Insert cursor\n\t\t\tif (this.showCursor === true) {\n\t\t\t\tthis.cursor = $(\"<span class=\\\"typed-cursor\\\">\" + this.cursorChar + \"</span>\");\n\t\t\t\tthis.el.after(this.cursor);\n\t\t\t}\n\t\t\tif (this.stringsElement) {\n\t\t\t\tthis.strings = [];\n\t\t\t\tthis.stringsElement.hide();\n\t\t\t\tconsole.log(this.stringsElement.children());\n\t\t\t\tvar strings = this.stringsElement.children();\n\t\t\t\t$.each(strings, function(key, value){\n\t\t\t\t\tself.strings.push($(value).html());\n\t\t\t\t});\n\t\t\t}\n\t\t\tthis.init();\n\t\t},\n\n\t\t// pass current string state to each function, types 1 char per call\n\t\ttypewrite: function(curString, curStrPos) {\n\t\t\t// exit when stopped\n\t\t\tif (this.stop === true) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// varying values for setTimeout during typing\n\t\t\t// can't be global since number changes each time loop is executed\n\t\t\tvar humanize = Math.round(Math.random() * (100 - 30)) + this.typeSpeed;\n\t\t\tvar self = this;\n\n\t\t\t// ------------- optional ------------- //\n\t\t\t// backpaces a certain string faster\n\t\t\t// ------------------------------------ //\n\t\t\t// if (self.arrayPos == 1){\n\t\t\t//  self.backDelay = 50;\n\t\t\t// }\n\t\t\t// else{ self.backDelay = 500; }\n\n\t\t\t// contain typing function in a timeout humanize'd delay\n\t\t\tself.timeout = setTimeout(function() {\n\t\t\t\t// check for an escape character before a pause value\n\t\t\t\t// format: \\^\\d+ .. eg: ^1000 .. should be able to print the ^ too using ^^\n\t\t\t\t// single ^ are removed from string\n\t\t\t\tvar charPause = 0;\n\t\t\t\tvar substr = curString.substr(curStrPos);\n\t\t\t\tif (substr.charAt(0) === '^') {\n\t\t\t\t\tvar skip = 1; // skip atleast 1\n\t\t\t\t\tif (/^\\^\\d+/.test(substr)) {\n\t\t\t\t\t\tsubstr = /\\d+/.exec(substr)[0];\n\t\t\t\t\t\tskip += substr.length;\n\t\t\t\t\t\tcharPause = parseInt(substr);\n\t\t\t\t\t}\n\n\t\t\t\t\t// strip out the escape character and pause value so they're not printed\n\t\t\t\t\tcurString = curString.substring(0, curStrPos) + curString.substring(curStrPos + skip);\n\t\t\t\t}\n\n\t\t\t\tif (self.contentType === 'html') {\n\t\t\t\t\t// skip over html tags while typing\n\t\t\t\t\tvar curChar = curString.substr(curStrPos).charAt(0)\n\t\t\t\t\tif (curChar === '<' || curChar === '&') {\n\t\t\t\t\t\tvar tag = '';\n\t\t\t\t\t\tvar endTag = '';\n\t\t\t\t\t\tif (curChar === '<') {\n\t\t\t\t\t\t\tendTag = '>'\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tendTag = ';'\n\t\t\t\t\t\t}\n\t\t\t\t\t\twhile (curString.substr(curStrPos + 1).charAt(0) !== endTag) {\n\t\t\t\t\t\t\ttag += curString.substr(curStrPos).charAt(0);\n\t\t\t\t\t\t\tcurStrPos++;\n\t\t\t\t\t\t\tif (curStrPos + 1 > curString.length) { break; }\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcurStrPos++;\n\t\t\t\t\t\ttag += endTag;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// timeout for any pause after a character\n\t\t\t\tself.timeout = setTimeout(function() {\n\t\t\t\t\tif (curStrPos === curString.length) {\n\t\t\t\t\t\t// fires callback function\n\t\t\t\t\t\tself.options.onStringTyped(self.arrayPos);\n\n\t\t\t\t\t\t// is this the final string\n\t\t\t\t\t\tif (self.arrayPos === self.strings.length - 1) {\n\t\t\t\t\t\t\t// animation that occurs on the last typed string\n\t\t\t\t\t\t\tself.options.callback();\n\n\t\t\t\t\t\t\tself.curLoop++;\n\n\t\t\t\t\t\t\t// quit if we wont loop back\n\t\t\t\t\t\t\tif (self.loop === false || self.curLoop === self.loopCount)\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tself.timeout = setTimeout(function() {\n\t\t\t\t\t\t\tself.backspace(curString, curStrPos);\n\t\t\t\t\t\t}, self.backDelay);\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t/* call before functions if applicable */\n\t\t\t\t\t\tif (curStrPos === 0) {\n\t\t\t\t\t\t\tself.options.preStringTyped(self.arrayPos);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// start typing each new char into existing string\n\t\t\t\t\t\t// curString: arg, self.el.html: original text inside element\n\t\t\t\t\t\tvar nextString = curString.substr(0, curStrPos + 1);\n\t\t\t\t\t\tif (self.attr) {\n\t\t\t\t\t\t\tself.el.attr(self.attr, nextString);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tif (self.isInput) {\n\t\t\t\t\t\t\t\tself.el.val(nextString);\n\t\t\t\t\t\t\t} else if (self.contentType === 'html') {\n\t\t\t\t\t\t\t\tself.el.html(nextString);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tself.el.text(nextString);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// add characters one by one\n\t\t\t\t\t\tcurStrPos++;\n\t\t\t\t\t\t// loop the function\n\t\t\t\t\t\tself.typewrite(curString, curStrPos);\n\t\t\t\t\t}\n\t\t\t\t\t// end of character pause\n\t\t\t\t}, charPause);\n\n\t\t\t\t// humanized value for typing\n\t\t\t}, humanize);\n\n\t\t},\n\n\t\tbackspace: function(curString, curStrPos) {\n\t\t\t// exit when stopped\n\t\t\tif (this.stop === true) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// varying values for setTimeout during typing\n\t\t\t// can't be global since number changes each time loop is executed\n\t\t\tvar humanize = Math.round(Math.random() * (100 - 30)) + this.backSpeed;\n\t\t\tvar self = this;\n\n\t\t\tself.timeout = setTimeout(function() {\n\n\t\t\t\t// ----- this part is optional ----- //\n\t\t\t\t// check string array position\n\t\t\t\t// on the first string, only delete one word\n\t\t\t\t// the stopNum actually represents the amount of chars to\n\t\t\t\t// keep in the current string. In my case it's 14.\n\t\t\t\t// if (self.arrayPos == 1){\n\t\t\t\t//  self.stopNum = 14;\n\t\t\t\t// }\n\t\t\t\t//every other time, delete the whole typed string\n\t\t\t\t// else{\n\t\t\t\t//  self.stopNum = 0;\n\t\t\t\t// }\n\n\t\t\t\tif (self.contentType === 'html') {\n\t\t\t\t\t// skip over html tags while backspacing\n\t\t\t\t\tif (curString.substr(curStrPos).charAt(0) === '>') {\n\t\t\t\t\t\tvar tag = '';\n\t\t\t\t\t\twhile (curString.substr(curStrPos - 1).charAt(0) !== '<') {\n\t\t\t\t\t\t\ttag -= curString.substr(curStrPos).charAt(0);\n\t\t\t\t\t\t\tcurStrPos--;\n\t\t\t\t\t\t\tif (curStrPos < 0) { break; }\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcurStrPos--;\n\t\t\t\t\t\ttag += '<';\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// ----- continue important stuff ----- //\n\t\t\t\t// replace text with base text + typed characters\n\t\t\t\tvar nextString = curString.substr(0, curStrPos);\n\t\t\t\tif (self.attr) {\n\t\t\t\t\tself.el.attr(self.attr, nextString);\n\t\t\t\t} else {\n\t\t\t\t\tif (self.isInput) {\n\t\t\t\t\t\tself.el.val(nextString);\n\t\t\t\t\t} else if (self.contentType === 'html') {\n\t\t\t\t\t\tself.el.html(nextString);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tself.el.text(nextString);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// if the number (id of character in current string) is\n\t\t\t\t// less than the stop number, keep going\n\t\t\t\tif (curStrPos > self.stopNum) {\n\t\t\t\t\t// subtract characters one by one\n\t\t\t\t\tcurStrPos--;\n\t\t\t\t\t// loop the function\n\t\t\t\t\tself.backspace(curString, curStrPos);\n\t\t\t\t}\n\t\t\t\t// if the stop number has been reached, increase\n\t\t\t\t// array position to next string\n\t\t\t\telse if (curStrPos <= self.stopNum) {\n\t\t\t\t\tself.arrayPos++;\n\n\t\t\t\t\tif (self.arrayPos === self.strings.length) {\n\t\t\t\t\t\tself.arrayPos = 0;\n\n\t\t\t\t\t\t// Shuffle sequence again\n\t\t\t\t\t\tif(self.shuffle) self.sequence = self.shuffleArray(self.sequence);\n\n\t\t\t\t\t\tself.init();\n\t\t\t\t\t} else\n\t\t\t\t\t\tself.typewrite(self.strings[self.sequence[self.arrayPos]], curStrPos);\n\t\t\t\t}\n\n\t\t\t\t// humanized value for typing\n\t\t\t}, humanize);\n\n\t\t},\n\t\t/**\n\t\t * Shuffles the numbers in the given array.\n\t\t * @param {Array} array\n\t\t * @returns {Array}\n\t\t */\n\t\tshuffleArray: function(array) {\n\t\t\tvar tmp, current, top = array.length;\n\t\t\tif(top) while(--top) {\n\t\t\t\tcurrent = Math.floor(Math.random() * (top + 1));\n\t\t\t\ttmp = array[current];\n\t\t\t\tarray[current] = array[top];\n\t\t\t\tarray[top] = tmp;\n\t\t\t}\n\t\t\treturn array;\n\t\t},\n\n\t\t// Start & Stop currently not working\n\n\t\t// , stop: function() {\n\t\t//     var self = this;\n\n\t\t//     self.stop = true;\n\t\t//     clearInterval(self.timeout);\n\t\t// }\n\n\t\t// , start: function() {\n\t\t//     var self = this;\n\t\t//     if(self.stop === false)\n\t\t//        return;\n\n\t\t//     this.stop = false;\n\t\t//     this.init();\n\t\t// }\n\n\t\t// Reset and rebuild the element\n\t\treset: function() {\n\t\t\tvar self = this;\n\t\t\tclearInterval(self.timeout);\n\t\t\tvar id = this.el.attr('id');\n\t\t\tthis.el.empty();\n\t\t\tif (typeof this.cursor !== 'undefined') {\n        this.cursor.remove();\n      }\n\t\t\tthis.strPos = 0;\n\t\t\tthis.arrayPos = 0;\n\t\t\tthis.curLoop = 0;\n\t\t\t// Send the callback\n\t\t\tthis.options.resetCallback();\n\t\t}\n\n\t};\n\n\t$.fn.typed = function(option) {\n\t\treturn this.each(function() {\n\t\t\tvar $this = $(this),\n\t\t\t\tdata = $this.data('typed'),\n\t\t\t\toptions = typeof option == 'object' && option;\n\t\t\tif (data) { data.reset(); }\n\t\t\t$this.data('typed', (data = new Typed(this, options)));\n\t\t\tif (typeof option == 'string') data[option]();\n\t\t});\n\t};\n\n\t$.fn.typed.defaults = {\n\t\tstrings: [\"These are the default values...\", \"You know what you should do?\", \"Use your own!\", \"Have a great day!\"],\n\t\tstringsElement: null,\n\t\t// typing speed\n\t\ttypeSpeed: 0,\n\t\t// time before typing starts\n\t\tstartDelay: 0,\n\t\t// backspacing speed\n\t\tbackSpeed: 0,\n\t\t// shuffle the strings\n\t\tshuffle: false,\n\t\t// time before backspacing\n\t\tbackDelay: 500,\n\t\t// loop\n\t\tloop: false,\n\t\t// false = infinite\n\t\tloopCount: false,\n\t\t// show cursor\n\t\tshowCursor: true,\n\t\t// character for cursor\n\t\tcursorChar: \"|\",\n\t\t// attribute to type (null == text)\n\t\tattr: null,\n\t\t// either html or text\n\t\tcontentType: 'html',\n\t\t// call when done callback function\n\t\tcallback: function() {},\n\t\t// starting callback function before each string\n\t\tpreStringTyped: function() {},\n\t\t//callback for every typed string\n\t\tonStringTyped: function() {},\n\t\t// callback for reset\n\t\tresetCallback: function() {}\n\t};\n\n\n}(window.jQuery);\n"],"sourceRoot":"/source/"}